"use strict";(self.webpackChunk_webdevstudios_docs=self.webpackChunk_webdevstudios_docs||[]).push([[310],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return d}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=n.createContext({}),l=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=l(r),d=o,y=m["".concat(p,".").concat(d)]||m[d]||c[d]||a;return r?n.createElement(y,s(s({ref:t},u),{},{components:r})):n.createElement(y,s({ref:t},u))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,s=new Array(a);s[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var l=2;l<a;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},8034:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return p},default:function(){return d},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return c}});var n=r(7462),o=r(3366),a=(r(7294),r(3905)),s=["components"],i={title:"Custom Post Types"},p=void 0,l={unversionedId:"learn/custom-post-types",id:"learn/custom-post-types",title:"Custom Post Types",description:"Our Next.js starter supports Custom Post Types. Follow the Example below as a starting point.",source:"@site/docs/learn/custom-post-types.md",sourceDirName:"learn",slug:"/learn/custom-post-types",permalink:"/nextjs-wordpress-starter/docs/learn/custom-post-types",editUrl:"https://github.com/WebDevStudios/nextjs-wordpress-starter/blob/main/docs/learn/custom-post-types.md",tags:[],version:"current",lastUpdatedBy:"Jeffrey de Wit",lastUpdatedAt:1655902892,formattedLastUpdatedAt:"6/22/2022",frontMatter:{title:"Custom Post Types"},sidebar:"tutorialSidebar",previous:{title:"Creating Content",permalink:"/nextjs-wordpress-starter/docs/learn/creating-content"},next:{title:"Settings Page",permalink:"/nextjs-wordpress-starter/docs/learn/settings-page"}},u={},c=[{value:"Workflow",id:"workflow",level:2},{value:"Example",id:"example",level:2},{value:"Catch-all Route",id:"catch-all-route",level:3},{value:"Team Single Query",id:"team-single-query",level:3},{value:"Team Archive Query",id:"team-archive-query",level:3},{value:"Update Post Types",id:"update-post-types",level:3},{value:"Update Archive SEO",id:"update-archive-seo",level:3},{value:"Update Single Post Query Handling",id:"update-single-post-query-handling",level:3}],m={toc:c};function d(e){var t=e.components,r=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Our Next.js starter supports Custom Post Types. Follow the ",(0,a.kt)("a",{parentName:"p",href:"custom-post-types#example"},"Example")," below as a starting point."),(0,a.kt)("h2",{id:"workflow"},"Workflow"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Register a Custom Post Type"),(0,a.kt)("li",{parentName:"ol"},"Create a new folder in the ",(0,a.kt)("inlineCode",{parentName:"li"},"/pages")," directory of the Next.js WordPress Starter"),(0,a.kt)("li",{parentName:"ol"},"Name the folder to match your CPT slug (e.g, if your CPT slug was ",(0,a.kt)("inlineCode",{parentName:"li"},"products"),", name the folder ",(0,a.kt)("inlineCode",{parentName:"li"},"/products"),")"),(0,a.kt)("li",{parentName:"ol"},"Create a ",(0,a.kt)("a",{parentName:"li",href:"https://nextjs.org/docs/routing/dynamic-routes#catch-all-routes"},"catch-all route file")," named ",(0,a.kt)("inlineCode",{parentName:"li"},"[[...slug]].js")),(0,a.kt)("li",{parentName:"ol"},"Build your query inside ",(0,a.kt)("inlineCode",{parentName:"li"},"/products/[[...slug]].js"))),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"The following code samples would add frontend handling for a CPT called ",(0,a.kt)("inlineCode",{parentName:"p"},"team")," with GraphQL single name ",(0,a.kt)("inlineCode",{parentName:"p"},"team")," and plural name ",(0,a.kt)("inlineCode",{parentName:"p"},"teams"),"."),(0,a.kt)("h3",{id:"catch-all-route"},"Catch-all Route"),(0,a.kt)("p",null,"File: ",(0,a.kt)("inlineCode",{parentName:"p"},"pages/team/[[...slug]].js")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import Breadcrumbs from '@/components/atoms/Breadcrumbs'\nimport Container from '@/components/atoms/Container'\nimport RichText from '@/components/atoms/RichText'\nimport Layout from '@/components/common/Layout'\nimport Blocks from '@/components/molecules/Blocks'\nimport Archive from '@/components/organisms/Archive'\nimport getPagePropTypes from '@/functions/getPagePropTypes'\nimport getPostTypeStaticPaths from '@/functions/wordpress/postTypes/getPostTypeStaticPaths'\nimport getPostTypeStaticProps from '@/functions/wordpress/postTypes/getPostTypeStaticProps'\n\n// Define route post type.\nconst postType = 'team'\n\n/**\n * Render the Team component.\n *\n * @author WebDevStudios\n * @param  {object}  props            The component attributes as props.\n * @param  {object}  props.post       Post data from WordPress.\n * @param  {boolean} props.archive    Whether displaying single post (false) or archive (true).\n * @param  {Array}   props.posts      Array of post data from WordPress.\n * @param  {object}  props.pagination Archive pagination data from WordPress.\n * @return {Element}                  The Team component.\n */\nexport default function Team({post, archive, posts, pagination}) {\n  if (archive) {\n    return (\n      <Layout seo={{...post?.seo}}>\n        <Container>\n          <Archive posts={posts} postType={postType} pagination={pagination} />\n        </Container>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout seo={{...post?.seo}}>\n      <Container>\n        <article className=\"innerWrap\">\n          {!!post?.seo?.breadcrumbs && (\n            <Breadcrumbs breadcrumbs={post.seo.breadcrumbs} />\n          )}\n          <RichText tag=\"h1\">{post?.title}</RichText>\n          <p>\n            {post?.teamMemberProfile?.title} -{' '}\n            {post?.teamMemberProfile?.location}\n          </p>\n          <Blocks blocks={post?.blocks} />\n        </article>\n      </Container>\n    </Layout>\n  )\n}\n\n/**\n * Get post static paths.\n *\n * @author WebDevStudios\n * @return {object} Object consisting of array of paths and fallback setting.\n */\nexport async function getStaticPaths() {\n  return await getPostTypeStaticPaths(postType)\n}\n\n/**\n * Get post static props.\n *\n * @author WebDevStudios\n * @param  {object}  context             Context for current post.\n * @param  {object}  context.params      Route parameters for current post.\n * @param  {boolean} context.preview     Whether requesting preview of post.\n * @param  {object}  context.previewData Post preview data.\n * @return {object}                      Post props.\n */\nexport async function getStaticProps({params, preview, previewData}) {\n  return getPostTypeStaticProps(params, postType, preview, previewData)\n}\n\nTeam.propTypes = {\n  ...getPagePropTypes(postType)\n}\n")),(0,a.kt)("h3",{id:"team-single-query"},"Team Single Query"),(0,a.kt)("p",null,"File: ",(0,a.kt)("inlineCode",{parentName:"p"},"lib/wordpress/teams/queryTeamById.js")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import authorPostFields from '@/lib/wordpress/_query-partials/authorPostFields'\nimport defaultPageData from '@/lib/wordpress/_query-partials/defaultPageData'\nimport featuredImagePostFields from '@/lib/wordpress/_query-partials/featuredImagePostFields'\nimport globalPostFields from '@/lib/wordpress/_query-partials/globalPostFields'\nimport seoPostFields from '@/lib/wordpress/_query-partials/seoPostFields'\nimport {gql} from '@apollo/client'\n\n// Fragment: retrieve single team member fields.\nconst singleTeamFragment = gql`\n  fragment SingleTeamFields on Team {\n    ${globalPostFields}\n    blocksJSON\n    excerpt\n    ${seoPostFields}\n    ${authorPostFields}\n    ${featuredImagePostFields}\n  }\n`\n\n// Query: retrieve team member by specified identifier.\nconst queryTeamById = gql`\n  query GET_TEAM_BY_ID(\n    $id: ID!\n    $idType: TeamIdType = SLUG\n    $imageSize: MediaItemSizeEnum = LARGE\n  ) {\n    ${defaultPageData}\n    team(id: $id, idType: $idType) {\n      ...SingleTeamFields\n    }\n  }\n  ${singleTeamFragment}\n`\n\nexport default queryTeamById\n")),(0,a.kt)("h3",{id:"team-archive-query"},"Team Archive Query"),(0,a.kt)("p",null,"File: ",(0,a.kt)("inlineCode",{parentName:"p"},"lib/wordpress/teams/queryTeamsArchive.js")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import archiveData from '@/lib/wordpress/_query-partials/archiveData'\nimport defaultPageData from '@/lib/wordpress/_query-partials/defaultPageData'\nimport featuredImagePostFields from '@/lib/wordpress/_query-partials/featuredImagePostFields'\nimport globalPostFields from '@/lib/wordpress/_query-partials/globalPostFields'\nimport {gql} from '@apollo/client'\n\n// Fragment: retrieve archive team fields.\nconst archiveTeamFragment = gql`\n  fragment ArchiveTeamFields on Team {\n    ${globalPostFields}\n    excerpt\n    ${featuredImagePostFields}\n  }\n`\n\n// Query: retrieve teams archive.\nconst queryTeamsArchive = gql`\n  query GET_TEAMS_ARCHIVE(\n    $first: Int\n    $last: Int\n    $after: String\n    $before: String\n    $orderBy: PostObjectsConnectionOrderbyEnum = DATE\n    $order: OrderEnum = DESC\n    $imageSize: MediaItemSizeEnum = THUMBNAIL\n  ) {\n    ${defaultPageData}\n    teams(\n      first: $first\n      last: $last\n      after: $after\n      before: $before\n      where: {orderby: {field: $orderBy, order: $order}}\n    ) {\n      ${archiveData}\n      edges {\n        node {\n          ...ArchiveTeamFields\n        }\n      }\n    }\n  }\n  ${archiveTeamFragment}\n`\n\nexport default queryTeamsArchive\n")),(0,a.kt)("h3",{id:"update-post-types"},"Update Post Types"),(0,a.kt)("p",null,"File: ",(0,a.kt)("inlineCode",{parentName:"p"},"lib/wordpress/_config/postTypes.js")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"  // Define valid WP post types (singular and plural GraphQL names).\n  export const postTypes = {\n    page: {\n      pluralName: 'pages',\n      route: ''\n    },\n    post: {\n      pluralName: 'posts',\n      route: ''\n    },\n+   team: {\n+     pluralName: 'teams',\n+     route: 'team'\n+   }\n  }\n\n  // Define hierarchical post types.\n  export const hierarchicalPostTypes = ['page']\n")),(0,a.kt)("h3",{id:"update-archive-seo"},"Update Archive SEO"),(0,a.kt)("p",null,"File: ",(0,a.kt)("inlineCode",{parentName:"p"},"lib/wordpress/_config/archiveQuerySeo.js")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"  import queryPostsArchive from '@/lib/wordpress/posts/queryPostsArchive'\n+ import queryTeamsArchive from '@/lib/wordpress/teams/queryTeamsArchive'\n\n  // Define SEO for archives.\n  const archiveQuerySeo = {\n    post: {\n      query: queryPostsArchive,\n      title: 'Blog',\n      description: ''\n    },\n+   team: {\n+     query: queryTeamsArchive,\n+     title: 'Team Members',\n+     description: ''\n+   }\n  }\n\n  export default archiveQuerySeo\n")),(0,a.kt)("h3",{id:"update-single-post-query-handling"},"Update Single Post Query Handling"),(0,a.kt)("p",null,"File: ",(0,a.kt)("inlineCode",{parentName:"p"},"functions/wordpress/postTypes/getPostTypeById.js")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"  import isHierarchicalPostType from '@/functions/wordpress/postTypes/isHierarchicalPostType'\n  import processPostTypeQuery from '@/functions/wordpress/postTypes/processPostTypeQuery'\n  import queryPageById from '@/lib/wordpress/pages/queryPageById'\n  import queryPostById from '@/lib/wordpress/posts/queryPostById'\n+ import queryTeamById from '@/lib/wordpress/teams/queryTeamById'\n\n  /**\n  * Retrieve single post by specified identifier.\n  *\n  * @author WebDevStudios\n  * @param  {string}          postType WP post type.\n  * @param  {number | string} id       Post identifier.\n  * @param  {string}          idType   Type of ID.\n  * @param  {string}          preview  Whether query is for a regular post view (null), a preview check (basic), or full post preview (full).\n  * @return {object}                   Object containing Apollo client instance and post data or error object.\n  */\n  export default async function getPostTypeById(\n    postType,\n    id,\n    idType = 'SLUG',\n    preview = null\n  ) {\n    // Define single post query based on post type.\n    const postTypeQuery = {\n      page: queryPageById,\n      post: queryPostById,\n+     team: queryTeamById\n    }\n\n    // Check if post type is hierarchical.\n    const isHierarchical = isHierarchicalPostType(postType)\n\n    // Fix default ID type for hierarchical posts.\n    idType = !isHierarchical || 'SLUG' !== idType ? idType : 'URI'\n\n    // Retrieve post type query.\n    const query = postTypeQuery?.[postType] ?? null\n\n    return processPostTypeQuery(postType, id, query, {id, idType}, preview)\n  }\n")))}d.isMDXComponent=!0}}]);